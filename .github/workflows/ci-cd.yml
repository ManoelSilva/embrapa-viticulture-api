name: 'EC2 Deploy'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python (for tar)
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check EC2 instance state
        id: ec2state
        run: |
          STATE=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "state=$STATE" >> $GITHUB_OUTPUT

      - name: Start EC2 instance if stopped
        if: steps.ec2state.outputs.state != 'running'
        run: |
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }}
          echo "Waiting for EC2 to enter 'running' state..."
          for i in {1..30}; do
            STATE=$(aws ec2 describe-instances --instance-ids ${{ secrets.EC2_INSTANCE_ID }} --query "Reservations[0].Instances[0].State.Name" --output text)
            if [ "$STATE" = "running" ]; then
              echo "EC2 is running."
              break
            fi
            sleep 10
          done

      - name: Wait for SSH
        run: |
          for i in {1..30}; do
            if nc -z -w 1 ${{ secrets.EC2_PUBLIC_IP }} 22; then
              echo "SSH is available"
              exit 0
            fi
            echo "Waiting for SSH... Attempt $i"
            sleep 10
          done
          echo "SSH not available after 5 minutes"
          exit 1

      - name: Prepare deployment package
        run: |
          mkdir -p deploy/service deploy/routes deploy/config
          cp app.py requirements.txt logger_serialize.py deploy/
          cp -r service/* deploy/service/
          cp -r routes/* deploy/routes/
          cp -r config/* deploy/config/
          cp infra/deploy.sh deploy/
          tar -cf deploy.tar -C deploy .

      - name: Upload deployment package to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy.tar"
          target: "/tmp/"

      - name: Stop app service on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl stop embrapa-viticulture || true

      - name: Deploy and restart app on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf /tmp/deploy
            mkdir -p /tmp/deploy
            tar -xf /tmp/deploy.tar -C /tmp/deploy
            cd /tmp/deploy
            chmod +x deploy.sh
            dos2unix deploy.sh || true
            ./deploy.sh

      - name: Check app service status
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo systemctl status embrapa-viticulture
            sudo journalctl -u embrapa-viticulture -n 50 