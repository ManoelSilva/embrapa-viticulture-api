name: 'Terraform'

on:
  push:
    branches: [ "main" ]
    paths:
      - '../../infra/**'
      - 'app.py'
      - 'requirements.txt'
      - 'service/**'
      - 'routes/**'
      - 'config/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - '../../infra/**'
      - 'app.py'
      - 'requirements.txt'
      - 'service/**'
      - 'routes/**'
      - 'config/**'

env:
  TF_VERSION: '1.5.7'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./infra

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./infra

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: ./infra
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Get runner public IP
        id: ip
        run: |
          echo "GIT_IP=$(curl -s https://api.ipify.org)/32" >> $GITHUB_ENV

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -var="ssh_access_cidr=$GIT_IP"
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Public IP
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: get_ip
        run: |
          IP=$(terraform output -raw public_ip)
          echo "public_ip=$IP" >> $GITHUB_OUTPUT
        working-directory: ./infra

      - name: Wait for SSH
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          for i in {1..30}; do
            if nc -z -w 1 ${{ steps.get_ip.outputs.public_ip }} 22; then
              echo "SSH is available"
              exit 0
            fi
            echo "Waiting for SSH... Attempt $i"
            sleep 10
          done
          echo "SSH not available after 5 minutes"
          exit 1

      - name: Deploy Application
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_ip.outputs.public_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Download deployment script
            wget https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/infrastructure/deploy.sh
            chmod +x deploy.sh
            # Execute deployment script
            GITHUB_REPOSITORY=${{ github.repository }} ./deploy.sh 